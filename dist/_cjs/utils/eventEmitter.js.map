{"version":3,"file":"eventEmitter.js","sourceRoot":"","sources":["../../../src/utils/eventEmitter.ts"],"names":[],"mappings":";;;AAIA,MAAa,YAAY;IAGvB;QAFQ,WAAM,GAAe,EAAE,CAAC;QAG9B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,CAAC;IACD,EAAE,CAAC,KAAa,EAAE,QAAkB;QAClC,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE;YAC1C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SACzB;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClC,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpD,CAAC;IACD,cAAc,CAAC,KAAa,EAAE,QAAkB;QAC9C,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE;YAC1C,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACjD,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE;gBACZ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;aACnC;SACF;IACH,CAAC;IACD,IAAI,CAAC,KAAa,EAAE,OAAqB,IAAI;QAC3C,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE;YAC1C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,QAAkB,EAAE,EAAE;gBAChD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IACD,IAAI,CAAC,KAAa,EAAE,QAAkB;QACpC,MAAM,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,IAAS,EAAE,EAAE;YAC7C,MAAM,EAAE,CAAC;YACT,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAlCD,oCAkCC;AAED,MAAM,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AACxC,kBAAe,YAAY,CAAC","sourcesContent":["type tEventList = {\n  [key: string]: Function[];\n};\n\nexport class EventEmitter {\n  private events: tEventList = {};\n\n  constructor() {\n    this.events = {};\n  }\n  on(event: string, listener: Function): Function {\n    if (typeof this.events[event] !== \"object\") {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n    return () => this.removeListener(event, listener);\n  }\n  removeListener(event: string, listener: Function): void {\n    if (typeof this.events[event] === \"object\") {\n      const idx = this.events[event].indexOf(listener);\n      if (idx > -1) {\n        this.events[event].splice(idx, 1);\n      }\n    }\n  }\n  emit(event: string, args: any[] | null = null): void {\n    if (typeof this.events[event] === \"object\") {\n      this.events[event].forEach((listener: Function) => {\n        listener.call(args);\n      });\n    }\n  }\n  once(event: string, listener: Function): void {\n    const remove = this.on(event, (...args: any) => {\n      remove();\n      listener.call(args);\n    });\n  }\n}\n\nconst eventEmitter = new EventEmitter();\nexport default eventEmitter;\n"]}