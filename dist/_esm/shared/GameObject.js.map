{"version":3,"file":"GameObject.js","sourceRoot":"","sources":["../../../src/shared/GameObject.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAY1D,MAAM,OAAgB,UAAU;IAS9B,YAAY,UAA6B,EAAE;QAPpC,SAAI,GAAkB,IAAI,CAAC;QAC3B,MAAC,GAAW,CAAC,CAAC;QACd,MAAC,GAAW,CAAC,CAAC;QACd,UAAK,GAAW,CAAC,CAAC;QAClB,WAAM,GAA0B,IAAI,CAAC;QAI1C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE;YAC7C,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QAClB,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,KAAU,CAAC;IAEjB,IAAI,CAAC,MAAe;QACzB,IAAI,MAAM,IAAI,IAAI,CAAC,MAAM,YAAY,cAAc,EAAE;YACnD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;SAC1C;IACH,CAAC;IAEM,OAAO;;QACZ,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,0CAAE,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAEM,SAAS,KAAU,CAAC;IAEpB,SAAS;QACd,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO,IAAI,CAAC,MAAM,CAAC;SACpB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;SACjC;IACH,CAAC;IAEM,QAAQ,CAAC,IAAY;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAEM,UAAU,CAAC,MAAsB;QACtC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;CACF","sourcesContent":["import { SpriteInstance } from \"../shared/SpriteInstance\";\nimport { Canvas } from \"./Canvas\";\nimport { InstanceBuffer } from \"../modules/instance\";\n\ninterface iGameObjectParams {\n  [key: string]: any;\n  name?: string | null;\n  x?: number;\n  y?: number;\n  depth?: number;\n}\n\nexport abstract class GameObject implements iGameObjectParams {\n  [key: string]: any;\n  public name: string | null = null;\n  public x: number = 0;\n  public y: number = 0;\n  public depth: number = 0;\n  public sprite: SpriteInstance | null = null;\n  private buffer?: InstanceBuffer;\n\n  constructor(another: iGameObjectParams = {}) {\n    Object.entries(another).forEach(([key, val]) => {\n      this[key] = val;\n    });\n  }\n\n  public update(): void {}\n\n  public draw(canvas?: Canvas): void {\n    if (canvas && this.sprite instanceof SpriteInstance) {\n      this.sprite.draw(canvas, this.x, this.y);\n    }\n  }\n\n  public destroy(): void {\n    this?.buffer?.destroy(this);\n  }\n\n  public onDestroy(): void {}\n\n  public getBuffer(): InstanceBuffer {\n    if (this.buffer) {\n      return this.buffer;\n    } else {\n      throw new Error(\"Empty buffer\");\n    }\n  }\n\n  public _setName(name: string): void {\n    this.name = name;\n  }\n\n  public _setBuffer(buffer: InstanceBuffer): void {\n    this.buffer = buffer;\n  }\n}\n"]}