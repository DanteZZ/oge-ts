{"version":3,"file":"Collider.js","sourceRoot":"","sources":["../../../src/shared/Collider.ts"],"names":[],"mappings":"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","sourcesContent":["import { ColliderBuffer } from \"../modules/collider\";\nimport { Canvas } from \"./Canvas\";\nimport { GameObject } from \"./GameObject\";\n\nexport enum eColliderType {\n  rectangle,\n  circle,\n}\n\nexport interface iColliderOptions {\n  offsetX: number;\n  offsetY: number;\n  width: number;\n  height: number;\n  radius: number;\n  type: eColliderType;\n  [key: string]: any;\n}\n\ninterface iColliderPosition {\n  x: number;\n  y: number;\n}\n\nexport class Collider implements iColliderOptions {\n  [key: string]: any;\n  public instance: GameObject;\n  public type: eColliderType = eColliderType.rectangle;\n  public collides: Collider[] = [];\n  offsetX = 0;\n  offsetY = 0;\n  width = 0;\n  height = 0;\n  radius = 0;\n  buffer: ColliderBuffer;\n\n  constructor(\n    buffer: ColliderBuffer,\n    instance: GameObject,\n    opts?: Partial<iColliderOptions>\n  ) {\n    this.instance = instance;\n    this.buffer = buffer;\n    opts &&\n      Object.entries(opts).forEach(([key, val]) => {\n        this[key] = val;\n      });\n  }\n\n  position(): iColliderPosition {\n    return {\n      x: this.instance.x + this.offsetX,\n      y: this.instance.y + this.offsetY,\n    };\n  }\n\n  draw(canvas?: Canvas, style?: string) {\n    if (canvas) {\n      if (this.type === eColliderType.rectangle) {\n        canvas.drawRect(\n          this.position().x,\n          this.position().y,\n          this.width,\n          this.height,\n          {\n            fillStyle: style || \"rgba(3, 119, 252, .5)\",\n          }\n        );\n      } else {\n        canvas.drawArc(\n          this.position().x,\n          this.position().y,\n          this.radius,\n          undefined,\n          undefined,\n          {\n            fillStyle: style || \"rgba(3, 119, 252, .5)\",\n          }\n        );\n      }\n    }\n  }\n\n  destroy() {\n    this.buffer.destroy(this);\n  }\n\n  isIntersect(another: Collider, self: Collider = this) {\n    const [c1, c2] = [self, another];\n    if (\n      c1.type === eColliderType.rectangle &&\n      c2.type === eColliderType.rectangle\n    ) {\n      return this.rectIntersect(\n        c1.position().x,\n        c1.position().y,\n        c1.width,\n        c1.height,\n        c2.position().x,\n        c2.position().y,\n        c2.width,\n        c2.height\n      );\n    } else if (\n      c1.type === eColliderType.circle &&\n      c2.type === eColliderType.circle\n    ) {\n      return this.circleIntersect(\n        c1.position().x,\n        c1.position().y,\n        c1.radius,\n        c2.position().x,\n        c2.position().y,\n        c2.radius\n      );\n    } else {\n      const c = c1.type === eColliderType.circle ? c1 : c2;\n      const r = c1.type === eColliderType.rectangle ? c1 : c2;\n\n      return this.circleRectIntersect(\n        c.position().x,\n        c.position().y,\n        c.radius,\n        r.position().x,\n        r.position().y,\n        r.width,\n        r.height\n      );\n    }\n  }\n\n  private rectIntersect(\n    x1: number,\n    y1: number,\n    w1: number,\n    h1: number,\n    x2: number,\n    y2: number,\n    w2: number,\n    h2: number\n  ) {\n    if (x2 > w1 + x1 || x1 > w2 + x2 || y2 > h1 + y1 || y1 > h2 + y2) {\n      return false;\n    }\n    return true;\n  }\n\n  private circleIntersect(\n    x1: number,\n    y1: number,\n    r1: number,\n    x2: number,\n    y2: number,\n    r2: number\n  ) {\n    // Calculate the distance between the two circles\n    let squareDistance = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\n    // When the distance is smaller or equal to the sum\n    // of the two radius, the circles touch or overlap\n    return squareDistance <= (r1 + r2) * (r1 + r2);\n  }\n\n  private circleRectIntersect(\n    cX: number,\n    cY: number,\n    cR: number,\n    rX: number,\n    rY: number,\n    rW: number,\n    rH: number\n  ) {\n    const distX = Math.abs(cX - rX - rW / 2);\n    const distY = Math.abs(cY - rY - rH / 2);\n\n    if (distX > rW / 2 + cR) {\n      return false;\n    }\n    if (distY > rH / 2 + cR) {\n      return false;\n    }\n\n    if (distX <= rW / 2) {\n      return true;\n    }\n    if (distY <= rW / 2) {\n      return true;\n    }\n\n    const dx = distX - rW / 2;\n    const dy = distY - rH / 2;\n    return dx * dx + dy * dy <= cR * cR;\n  }\n}\n"]}