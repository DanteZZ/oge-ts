{"version":3,"file":"scene.js","sourceRoot":"","sources":["../../../src/modules/scene.ts"],"names":[],"mappings":"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","sourcesContent":["import OGE from \"..\";\nimport eventEmitter from \"../utils/eventEmitter\";\nimport { Canvas } from \"../shared/Canvas\";\nimport { Camera } from \"./camera\";\nimport { InstanceBuffer } from \"./instance\";\n\nconst nullInstanceBuffer: InstanceBuffer = new InstanceBuffer();\n\nexport abstract class Scene {\n  public name: string | null = null;\n  public width: number = 0;\n  public height: number = 0;\n  public instances: InstanceBuffer = nullInstanceBuffer;\n  private buffer?: SceneBuffer;\n  private camera?: Camera;\n\n  public _init(context: OGE): void {\n    context.instanceBuffer.destroyAll();\n    this.init(context);\n  }\n\n  public _update(canvas?: Canvas): void {\n    if (this.camera && canvas) {\n      this.camera.update(canvas);\n    }\n  }\n\n  public init(context: OGE): void {}\n  public update(): void {}\n  public draw(canvas: Canvas): void {}\n\n  public setCamera(camera: Camera): void {\n    this.camera = camera;\n  }\n\n  public destroy(): void {\n    this?.buffer?.destroy(this);\n  }\n\n  public getBuffer(): SceneBuffer {\n    if (this.buffer) {\n      return this.buffer;\n    } else {\n      throw new Error(\"Empty buffer\");\n    }\n  }\n\n  public getCanvas(): Canvas {\n    return this.getBuffer().getCanvas();\n  }\n  public createCanvas(name: string, width?: number, height?: number): Canvas {\n    return this.getBuffer()\n      .getContext()\n      .graphic.createCanvas(name, width, height);\n  }\n\n  public getInstanceBuffer(): InstanceBuffer {\n    if (this.instances) {\n      return this.instances;\n    } else {\n      throw new Error(\"Empty buffer\");\n    }\n  }\n\n  public _setName(name: string): void {\n    this.name = name;\n  }\n\n  public _setBuffer(buffer: SceneBuffer): void {\n    this.buffer = buffer;\n  }\n\n  public _setInstanceBuffer(buffer: InstanceBuffer): void {\n    this.instances = buffer;\n  }\n}\n\nexport class SceneBuffer {\n  private scenes: Scene[];\n  private selected?: Scene;\n  private mainCanvas?: Canvas;\n  private context: OGE;\n\n  constructor(context: OGE, selected?: Scene, canvas?: Canvas) {\n    this.scenes = [];\n    this.mainCanvas = canvas;\n    this.context = context;\n    if (selected) {\n      this.add(selected);\n      this.selected = selected;\n    }\n\n    this.initEventListeners();\n  }\n\n  public initScene() {\n    if (this.selected) {\n      this.selected._init(this.context);\n    }\n  }\n\n  public setScene(scene: Scene): SceneBuffer {\n    this.selected = scene;\n    return this;\n  }\n\n  public setCanvas(canvas: Canvas): SceneBuffer {\n    this.mainCanvas = canvas;\n    return this;\n  }\n\n  public getCanvas(): Canvas {\n    if (this.mainCanvas) {\n      return this.mainCanvas;\n    } else {\n      throw new Error(\"Empty canvas\");\n    }\n  }\n  public getContext(): OGE {\n    return this.context;\n  }\n\n  private initEventListeners() {\n    eventEmitter.on(\"beforeRender\", () => this.update());\n    eventEmitter.on(\"preRender\", () => this.draw());\n  }\n\n  private update(): void {\n    if (this.selected) {\n      this.selected._update(this.mainCanvas);\n      this.selected?.update();\n    }\n  }\n\n  private draw(): void {\n    if (this.mainCanvas && this.selected) {\n      this.selected?.draw(this.mainCanvas);\n    }\n  }\n\n  public add(scene: Scene): Scene {\n    this.scenes.push(scene);\n    scene._setBuffer(this);\n    scene._setInstanceBuffer(this.context.instanceBuffer);\n    return scene;\n  }\n\n  public get(name: string): Scene | null {\n    return this.scenes.find((scene) => scene.name === name) || null;\n  }\n\n  public destroy(scene: Scene) {\n    this.scenes = this.scenes.filter((sc) => sc !== scene);\n  }\n}\n"]}