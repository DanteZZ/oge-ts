{"version":3,"file":"oge.js","sourceRoot":"","sources":["../../src/oge.ts"],"names":[],"mappings":"AAAA,OAAO,YAA8B,MAAM,sBAAsB,CAAC;AAClE,OAAO,OAAO,MAAM,iBAAiB,CAAC;AACtC,OAAO,KAAsB,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAE9C,MAAM,CAAC,OAAO,OAAO,GAAG;IActB,YAAY,OAA2B;QAJhC,QAAG,GAAW,CAAC,CAAC;QAChB,cAAS,GAAW,CAAC,CAAC;QACtB,kBAAa,GAAW,CAAC,CAAC;QAG/B,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;YACpC,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;YAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;YAC3C,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;YAEzC,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;YAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACtC;IACH,CAAC;IAEO,kBAAkB;QACxB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IAC7D,CAAC;IAEO,cAAc;QACpB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC;QACpE,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC;QAC1D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAClC,CAAC;IAEM,GAAG;QACR,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;IAC5B,CAAC;CACF","sourcesContent":["import eventEmitter, { EventEmitter } from \"./utils/eventEmitter\";\nimport Graphic from \"./utils/graphic\";\nimport Input, { InputBuffer } from \"./utils/input\";\nimport { Assets } from \"./utils/assets\";\nimport { Sprites } from \"./modules/sprite\";\nimport { InstanceBuffer } from \"./modules/instance\";\nimport { SceneBuffer } from \"./modules/scene\";\n\nexport default class OGE {\n  [key: string]: any;\n  public events: EventEmitter;\n  public graphic: Graphic;\n  public assets: Assets;\n  public sprites: Sprites;\n  public instanceBuffer: InstanceBuffer;\n  public sceneBuffer: SceneBuffer;\n  public input: InputBuffer;\n\n  public fps: number = 0;\n  public deltaTime: number = 0;\n  public lastDeltaTime: number = 0;\n\n  constructor(element: HTMLElement | null) {\n    if (element) {\n      this.graphic = new Graphic(element);\n      this.assets = new Assets();\n      this.sprites = new Sprites();\n      this.instanceBuffer = new InstanceBuffer();\n      this.sceneBuffer = new SceneBuffer(this);\n\n      this.events = eventEmitter;\n      this.input = Input;\n      this.initEventListeners();\n    } else {\n      throw new Error(\"Undefined element\");\n    }\n  }\n\n  private initEventListeners(): void {\n    this.events.on(\"afterRender\", () => this.calculateDelta());\n  }\n\n  private calculateDelta(): void {\n    this.fps = Math.round(1000 / (Date.now() - this.lastDeltaTime)) + 1;\n    this.deltaTime = (Date.now() - this.lastDeltaTime) / 1000;\n    this.lastDeltaTime = Date.now();\n  }\n\n  public run(): void {\n    this.graphic.playRender();\n  }\n}\n"]}